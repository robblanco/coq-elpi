/* Unary parametricity translation (Realizability)                           */
/* license: GNU Lesser General Public License Version 2.1 or later           */
/* ------------------------------------------------------------------------- */

% Author: Cyril Cohen

shorten std.{forall, forall2, do!, rev}.

:before "subst-fun:fail"
subst-fun XS T TXS :- !, mk-app T XS TXS.

% this is outside the namespace since the predicate is also the db-one
reali (sort prop as P) (fun `s` P x\ prod `s1` x _\ P) :- !.
reali (sort _) (fun `s` (sort (typ U)) x\ prod `s1` x _\ (sort (typ V))) :- !,
  coq.univ.new [] U, coq.univ.new [] V.

reali (fun N T B) (fun N T x\ fun N1 (TRsubst x) xR\ BR x xR) :- !, do! [
  coq.name-suffix `P` N N1,
  reali T TR,
  (pi x xR\ reali x xR => reali (B x) (BR x xR)),
  (TRsubst = x\ {subst-fun [x] TR})
].

reali (prod N T P as Prod) ProdR :- !, do! [
  coq.name-suffix `P` N N1,
  reali T TR,
  (pi x xR\ reali x xR => reali (P x) (PR x xR)),
  ProdR = fun `f` Prod f\ 
       prod N T x\ prod N1 {subst-fun [x] TR} xR\
       {subst-fun [{mk-app f [x]}] (PR x xR)}
].

reali (app [A|Bs]) ARBsR :- !, do! [
   reali A AR,
   derive.param1.reali-args Bs BsR,
   mk-app AR BsR ARBsR
].

reali (let N T V B) LetR :- !, do! [
  coq.name-suffix `P` N N1,
  reali T TR,
  reali V VR,
  (pi x xR\ reali x xR => reali (B x) (BR x xR)),
  LetR = let N T V x\ let N1 TR VR xR\ BR x xR
].

reali (match T P Bs) MR :- !, do! [
  reali T TR, 
  derive.param1.reali-match P PRM,
  reali T TR => derive.param1.reali-map Bs BsR,
  MR = match TR (PRM (x\ match x P Bs)) BsR
].

reali (fix N Rno T F as Fix) FixR :- !, do! [
  RnoR is 2 * Rno + 1,
  RnoR1 is RnoR + 1,
  reali T TR,
  (pi x xR\ reali x xR => reali (F x) (FR x xR)),
  (TRsubst = f\ {subst-fun [f] TR}),
  (pi f xR\ FixBody f xR = let N (TRsubst (F f)) (FR f xR) fr\
      {mk-trivial-match RnoR (TRsubst f) [] fr}),
  (pi f xR\ mk-eta RnoR1 (TRsubst f) (FixBody f xR) (EtaFixBody f xR)),
  coq.name-suffix N 1 N1,
  FixR = (let N T Fix f\ fix N1 RnoR (TRsubst f) xR\ EtaFixBody f xR)
].

namespace derive.param1 {

pred reali-args o:list term, o:list term.
reali-args [] [].
reali-args [X|Xs] [X,XR|XsR] :- do! [
  reali X XR,
  reali-args Xs XsR
].

pred reali-map o:list term, o:list term.
reali-map [] [].
reali-map [X|Xs] [XR|XsR] :- do! [
  reali X XR,
  reali-map Xs XsR
].

% helpers for match return type
pred reali-match i:term, o:((term -> term) -> term).
reali-match (fun N T B) PRM :- pi x\ not (B x = fun _ _ _), !, do! [
  reali T TR,
  (pi x xR\ reali x xR => reali (B x) (BR x xR)),
  coq.name-suffix `P` N N1,
  (pi z z1\ PRM z = 
    fun N T x\ fun N1 {subst-fun [x] TR} xR\ {mk-app (BR x xR) [z x]})
].

reali-match (fun N T B) PRM :- do! [
  reali T TR,
  (pi x xR\ reali x xR => reali-match (B x) (BR x xR)),
  coq.name-suffix N 1 N1,
  (pi z \ PRM z = fun N T x\ fun N1 {subst-fun [x] TR} xR\ BR x xR z)
].

% Storage: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

pred reali-store
  i:string, % Name suffix for the type class
  i:term,   % Term
  i:term.   % Translation
reali-store N X XR :- !,
  Nreali is "reali_" ^ N,
  Args = [_, _, X, XR],
  coq.elaborate (app [{{@elpi.derive.param1.store_reali}}|Args]) T2 T1,
  coq.env.add-const Nreali T1 T2 _ (global GR),
  coq.TC.declare-instance GR 0 tt.

pred reali-store-indc i:string, i:term, i:term.
reali-store-indc Prefix (global (indc GR) as X) XR :-
  reali-store {calc (Prefix ^ {coq.gr->id (indc GR)})} X XR.

% toplevel predicates %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

pred dispatch
  i:term,   % input of the translation
  i:string, % the name
  o:list prop.   % the clause

dispatch (global (const GR) as Term) Prefix Clauses :- !, do! [
  Name is Prefix ^ {coq.gr->id (const GR)},
  coq.env.const GR V _,

  reali V VR,
  coq.elaborate VR TyR XR,

  coq.env.add-const Name XR TyR _ TermR,

  reali-store Name Term TermR,

  C1 = (reali Term TermR :- !),
  coq.elpi.accumulate "derive.param1.db" (clause _ (before "reali:fail") C1),
  C2 = (realiR Term TermR :- !),
  coq.elpi.accumulate "derive.param1.db" (clause _ (before "realiR:fail") C2),
  Clauses = [C1, C2]
].

pred prefix-indc i:string, i:term, o:pair @constructor @id.
prefix-indc Prefix (global (indc K as GR)) (pr K NewName) :-
  coq.gr->id GR Name, NewName is Prefix ^ Name.

dispatch (global (indt GR) as Ind) Prefix Clauses :- !, do! [
  coq.env.indt GR _ _ Lno Ty Knames Ktypes,

  LnoR is 2 * Lno,

  pi new_name\ sigma KnamesR KtypesR TyR\ (
    reali Ind (global (indt new_name)) => reali Ty TyR,
    reali Ind (global (indt new_name)) =>
      map2 Knames Ktypes (k\ ty\ r\ sigma tyr\
        reali ty tyr, subst-fun [k] tyr r)
      KtypesR,
    map Knames (prefix-indc Prefix) KnamesR,

    NewName is Prefix ^ {coq.gr->id (indt GR)},

    coq.env.indt->decl
      (pr new_name NewName) tt LnoR LnoR {subst-fun [Ind] TyR} KnamesR KtypesR DeclR
  ),

  coq.typecheck-ind-decl DeclR,

  coq.env.add-indt DeclR (global (indt GRR)),

  reali-store NewName Ind (global (indt GRR)),
  coq.env.indt GRR _ _ _ _ RealNamesR _,
  forall2 Knames RealNamesR (reali-store-indc NewName),
  C1 = (reali Ind (global (indt GRR)) :- !),
  coq.elpi.accumulate "derive.param1.db" (clause _ (before "reali:fail") C1),
  C2 = (realiR Ind (global (indt GRR)) :- !),
  coq.elpi.accumulate "derive.param1.db" (clause _ (before "realiR:fail") C2),
  map2 Knames RealNamesR (a\ b\ r\ r = reali a b) CK,
  forall CK (c\
    coq.elpi.accumulate "derive.param1.db" (clause _ (before "reali:fail") c)),
  Clauses = [C1,C2|CK]
].

dispatch _ _ _ :- coq.error "derive.param1: not an inductive nor a constant".

pred main i:term, i:string, o:list prop.
main T Out Clauses :- dispatch T Out Clauses.

}

/*
%%%%%%%%%%%%%%%%%%%%%
% Tactic entrypoint %
%%%%%%%%%%%%%%%%%%%%%

% We disable coq-refiner
:before "refiner-assign-evar"
  evar _ _ _ :- !.

pred ctx->TC i:(list prop), o:(list (pair term term)).
ctx->TC [] [] :- !.
ctx->TC [decl X _ Ty |Xs] [pr X Ty|Is] :- !, ctx->TC Xs Is.
ctx->TC [def X _ _ _ Ty |Xs] [pr X Ty|Is] :- !, ctx->TC Xs Is.

solve _ [goal Ctx Ev (app[{{@reali}}, T, TR, X, XR]) _] _ :- !,
  coq.sigma.print,
  coq.say "goal->TC" {ctx->TC Ctx},
  coq.say "searching reali for" X,
  reali T TR,
  reali X XR,
  Ev = app [{{@Reali}}, T, TR, X, XR],
  coq.typecheck Ev Ty,
  coq.say "Ty=" Ty.

*/
